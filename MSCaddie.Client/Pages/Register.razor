@page "/register"
@inject HttpClient httpClient


<div class="row">
    <EditForm class="col-lg-4 offset-lg-3 pt-4 pb-4 border" Model="@request"
        OnValidSubmit="@HandleValidSubmit"  
        OnInvalidSubmit="@HandleInValidSubmit">
        <DataAnnotationsValidator />
        <div class="mb-4 text-center">
            <h3>Opret bruger</h3>
        </div>
        <div class="mb-4">
            <label>Bruger navn</label>
            <input @bind="request.UserName" class="form-control" placeholder="Bruger navn" />
            <ValidationMessage class="offset-md-1 col-md-8 text-danger" For="@(() => request.UserName)" />
        </div>
        <div class="mb-4">
            <label>Email</label>
            <input @bind="request.Email" class="form-control" placeholder="Email" />
            <ValidationMessage class="offset-md-1 col-md-8 text-danger" For="@(() => request.Email)" />
        </div>
        <div class="mb-4">
            <label>VGC No</label>
            <input @bind="request.VgcNo" class="form-control" placeholder="På formen nnnn" />
            <ValidationMessage class="offset-md-1 col-md-8 text-danger" For="@(() => request.VgcNo)" />
        </div>
        <div class="mb-4">
            <label>Password</label>
            <input @bind="request.Password" type="password" class="form-control" placeholder="Password" />
            <ValidationMessage class="offset-md-1 col-md-8 text-danger" For="@(() => request.Password)" />
        </div>
        <div class="mb-4">
            <label>Bekræft password</label>
            <input @bind="request.ConfirmPassword" type="password" class="form-control" placeholder="Bekræft password" />
            <ValidationMessage class="offset-md-1 col-md-8 text-danger" For="@(() => request.ConfirmPassword)" />
        </div>
        <div class="mb-4 d-grid gap-2">
            <button type="submit" class="btn btn-primary">Opret</button>
        </div>
        <p class="text-danger">@message</p>
        <p><a href="/login">@login</a></p>
    </EditForm>
</div>

@code {
    private RegisterRequest request = new RegisterRequest();
    string message = string.Empty, login = string.Empty;

    protected async Task HandleValidSubmit()
    {
        var res = await httpClient.PostAsJsonAsync<RegisterRequest>("/api/auth/register", request);

        if (res.IsSuccessStatusCode)
        {
            RequestResult result = await res.Content.ReadFromJsonAsync<RequestResult>();
            message = result.Message;
            if (result.Success)
            {
                message += "Du har modtaget en mail, hvor du skal bekræfte registreringen";
                login = "Derefter kan du logge ind her.";
            }
        }
        else
            message = res.ToString();
    }

    protected async Task HandleInValidSubmit()
    {
        message = "shit happened";
    }
}
