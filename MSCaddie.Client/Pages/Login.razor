@page "/login"
@inject HttpClient httpClient
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row">
    <EditForm class="col-lg-4 offset-lg-3 pt-4 pb-4 border" Model="@request"
        OnValidSubmit="@HandleValidSubmit"  
        OnInvalidSubmit="@HandleInValidSubmit">
        <DataAnnotationsValidator />

        <div class="mb-4 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-4">
            <label>Email</label>
            <input @bind-value="request.Email" class="form-control" placeholder="Email" />
            <ValidationMessage class="offset-md-1 col-md-8" For="@(() => request.Email)" />
        </div>
        <div class="mb-4">
            <label>Password</label>
            <input @bind-value="request.Password" type="password" class="form-control" placeholder="Password" />
            <ValidationMessage class="offset-md-1 col-md-8" For="@(() => request.Password)" />
        </div>
        <div class="mb-4 d-grid gap-2">
            <button type="submit" class="btn btn-primary">Login</button>
            <a href="/register" class="offset-md-1 col-6">Opret bruger</a>
            <a href="/ForgotPassword" class="offset-md-1 col-6">Glemt password</a>
        </div>
        <p class="text-danger">@message</p>
    </EditForm>
</div>

@code {
    private LoginRequest request = new();

    private string? message;

    protected async Task HandleValidSubmit()
    {
        var loginResponse = await httpClient.PostAsJsonAsync<LoginRequest>("/api/auth/Login", request);

        if (loginResponse.IsSuccessStatusCode)
        {
            var userSession = await loginResponse.Content.ReadFromJsonAsync<UserSession>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationStateAsync(userSession);
            navManager.NavigateTo("/", true);
        }
        else 
        {
            message = "Ukendt bruger eller forkert password";
        }
    }

    protected async Task HandleInValidSubmit()
    {
        message = "shit happened";
    }
}
